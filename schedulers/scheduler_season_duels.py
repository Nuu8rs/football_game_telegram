import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from database.models.duel import Duel
from services.duel_service import DuelService

from database.models.character import Character
from services.character_service import CharacterService

from constants import DUEL_END_DAY_SEASON

from collections import defaultdict
from logging_config import logger
from loader import bot

from typing import List, Tuple

class SchedulerSesonDuels:
    scheduler = AsyncIOScheduler()
    winners_count = 10
    trigger = CronTrigger(day=DUEL_END_DAY_SEASON, hour=10, minute=0)
    
    rewards_top_user = {
        10: {'money': 10, 'energy': 0},
        9:  {'money': 15, 'energy': 0},
        8:  {'money': 20, 'energy': 0},
        7:  {'money': 25, 'energy': 0},
        6:  {'money': 30, 'energy': 0},
        5:  {'money': 35, 'energy': 100},
        4:  {'money': 40, 'energy': 130},
        3:  {'money': 45, 'energy': 180},
        2:  {'money': 55, 'energy': 250},
        1:  {'money': 60, 'energy': 300},
    }
    
    TEXT_REWARD_TEMPLATE = """<b>–í—ñ—Ç–∞—î–º–æ –∑ –±–ª–∏—Å–∫—É—á–æ—é –ø–µ—Ä–µ–º–æ–≥–æ—é!</b>     
üéâüéâ –¢–∏ –ø–æ–∫–∞–∑–∞–≤ —Å–≤–æ—é —Å–∏–ª—É —Ç–∞ –º–∞–π—Å—Ç–µ—Ä–Ω—ñ—Å—Ç—å —É –ü–í–ü-–ø–µ–Ω–∞–ª—Ç—ñ, —ñ —Ü–µ —Ç–≤—ñ–π –∑–∞—Å–ª—É–∂–µ–Ω–∏–π —Ç—Ä—ñ—É–º—Ñ! üèÜ

–ó–∞ —Ç–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É —Ç–∏ –æ—Ç—Ä–∏–º–∞–≤:

üí∞ {money} –º–æ–Ω–µ—Ç
{energy_text}

–ü—Ä–æ–¥–æ–≤–∂—É–π –≤—Ä–∞–∂–∞—Ç–∏ –Ω–∞—Å —Å–≤–æ—ó–º–∏ –ø–µ—Ä–µ–º–æ–≥–∞–º–∏ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏! –¢–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —á–µ–º–ø—ñ–æ–Ω! üí™üî•
"""

    TEXT_ENERGY_TEMPLATE = "‚ö° {energy} –µ–Ω–µ—Ä–≥—ñ—ó"
    
    def _get_top_users(self, duels: list[Duel]) -> List[Tuple[Character, int]]:
        user_scores = defaultdict(int)
        
        for duel in duels:
            winners = duel.get_winner_duel
            if isinstance(winners, list): 
                for winner in winners:
                    user_scores[winner] += 1  
            else:
                user_scores[winners] += 3
        
        top_users = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)
        return top_users[:self.winners_count]
    
    
    def _get_text(self, money: int, energy: int) -> str:
        
        energy_text = self.TEXT_ENERGY_TEMPLATE.format(energy=energy) if energy else ""
        return self.TEXT_REWARD_TEMPLATE.format(
            money=money,
            energy_text = energy_text
        )
        

    async def _send_message(cls, user_id: int, text: str) -> None:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=text
            )
        except Exception as E:
            logger.error("error send message to users")
    
    async def _distribute_rewards(self, winner_users: List[Tuple[Character, int]]):
        
        for index, (user, _) in enumerate(winner_users, start=1):
            reward = self.rewards_top_user.get(index)
            
            money  = reward['money']
            energy = reward['energy'] 
              
            await CharacterService.update_money_character(
                character=user,
                amount_money_adjustment=money
            )
            if energy:
                await CharacterService.edit_character_energy(
                    character_obj=user,
                    amount_energy_adjustment=energy
                )
            
            text = self._get_text(money,energy)
                
            await self._send_message(
                user_id=user.characters_user_id,
                text=text
            )
            
    async def end_duel_season(self):
        logger.info("–û–ö–ê–ù–ß–ò–í–ê–Æ –°–ï–ó–û–ù –î–£–ï–õ–ï–ô")
        duels = await DuelService.get_season_duels()
        winner_users = self._get_top_users(duels)
        await self._distribute_rewards(winner_users)
    
    async def wait_to_end_season_duel(self):
        self.scheduler.add_job(self.end_duel_season, self.trigger,misfire_grace_time = 10
)
        self.scheduler.start()
    