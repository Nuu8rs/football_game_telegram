import asyncio
import random
from aiogram import Bot
from datetime import datetime, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from database.models.character import Character

from services.character_service import CharacterService

from constants_leagues import TypeLeague, GetConfig

from logging_config import logger
from loader import bot

LEAGUE_MESSAGES: dict[TypeLeague, str] = {
    TypeLeague.BEST_LEAGUE: (
        "üëë <b>–ï–≤—Ä–æ–ö—É–±–∫–∏</b> —Å—Ç–∞—Ä—Ç—É—é—Ç—å –∑–∞—Ä–∞–∑!\n\n"
        "üî• –¢—É—Ç –≥—Ä–∞—é—Ç—å —Ç—ñ–ª—å–∫–∏ –ª–µ–≥–µ–Ω–¥–∏ ‚Äî —Å–∏–ª—å–Ω—ñ, –¥–æ—Å–≤—ñ–¥—á–µ–Ω—ñ, –±–µ–∑–∫–æ–º–ø—Ä–æ–º—ñ—Å–Ω—ñ.\n"
        "üóì –¢—É—Ä–Ω—ñ—Ä —Ç—Ä–∏–≤–∞—Ç–∏–º–µ –∑ <b>{start}</b> –ø–æ <b>{end}</b>.\n"
        "–ó–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É –º—Ä—ñ—ó —Ç–∞ –¥–æ–≤–µ–¥–∏, —â–æ —Ç–∏ –∫—Ä–∞—â–∏–π –∑ –∫—Ä–∞—â–∏—Ö! ‚öΩÔ∏èüèÜ"
    ),
    TypeLeague.DEFAULT_LEAGUE: (
        "‚öΩ <b>–õ—ñ–≥–∞</b> —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—è!\n\n"
        "üéØ –Ü–¥–µ–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –ø—Ä–∞–≥–Ω–µ –ø—ñ–¥–Ω—è—Ç–∏—Å—è –≤–∏—â–µ.\n"
        "üìÖ –î–∞—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: <b>{start} ‚Äî {end}</b>.\n"
        "–ì—Ä–∞–π —Å–º—ñ–ª–∏–≤–æ —Ç–∞ –ø–µ—Ä–µ–º–∞–≥–∞–π –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º! üí™"
    ),
    TypeLeague.TOP_20_CLUB_LEAGUE: (
        "üíº <b>–ö—É–±–æ–∫ –£–∫—Ä–∞—ó–Ω–∏</b> –≤—ñ–¥–∫—Ä–∏–≤—Å—è!\n\n"
        "üîù –¢—ñ–ª—å–∫–∏ –æ–±—Ä–∞–Ω—ñ, —Ç—ñ–ª—å–∫–∏ –µ–ª—ñ—Ç–∞ ‚Äî —Å–ø—Ä–∞–≤–∂–Ω—è –±–∏—Ç–≤–∞ —Ç–∏—Ç–∞–Ω—ñ–≤.\n"
        "üìÖ –ü–µ—Ä—ñ–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è: <b>{start} ‚Äî {end}</b>.\n"
        "–í–∏–∫–ª–∞–¥–∏—Å—è –Ω–∞ –ø–æ–≤–Ω—É, –±–æ —Ç—É—Ç —Ä–∞—Ö—É—é—Ç—å—Å—è –∫–æ–∂–µ–Ω –≥–æ–ª —ñ –∫–æ–∂–Ω–µ –æ—á–∫–æ! ü•á"
    ),
    TypeLeague.NEW_CLUB_LEAGUE: (
        "üå± <b>–õ—ñ–≥–∞ –ù–æ–≤–∞—á–∫—ñ–≤</b> —Å—Ç–∞—Ä—Ç—É–≤–∞–ª–∞!\n\n"
        "üßÉ –ß–∞—Å –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–µ–±–µ —ñ –∑–∞—è–≤–∏—Ç–∏ –ø—Ä–æ —Å–≤—ñ–π –∫–ª—É–± –Ω–∞ –≤—Å—é –ª—ñ–≥—É.\n"
        "üóì –ú–∞—Ç—á—ñ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏–º—É—Ç—å –∑ <b>{start}</b> –ø–æ <b>{end}</b>.\n"
        "–í–ø–µ—Ä–µ–¥, –Ω–æ–≤–∞—á–∫–∏ ‚Äî –º–∞–π–±—É—Ç–Ω—î —Å–∞–º–µ –∑–∞ –≤–∞–º–∏! üçÄ"
    ),
}


class NotificationStartLeague:
    _bot: Bot = bot
    
    def __init__(self, type_league: TypeLeague) -> None:
        self.type_league = type_league
        
    @classmethod
    async def notify_start_league(cls, type_league: TypeLeague) -> None:
        obj = cls(type_league)
        all_characters = await CharacterService.get_all_users_not_bot()
        for character in all_characters:
            await obj._send_message(character)
            await asyncio.sleep(random.randint(1,2))
        
    async def _send_message(self, character: Character) -> None:
        try:
            await self._bot.send_message(
                chat_id=character.characters_user_id,
                text=self._get_text_league()
            )
        except Exception as E:
            logger.error(
                f"Error send notitication start league {character.character_name}"
            )
    
    def _get_text_league(self) -> str:
        config = GetConfig.get_config(self.type_league)
        start = config.DATETIME_START_LEAGUE.strftime("%d.%m")
        end = config.DATETIME_END_LEAGUE.strftime("%d.%m")

        template = LEAGUE_MESSAGES.get(self.type_league, None)
        if not template:
            return f"üì¢ –õ—ñ–≥–∞ {self.type_league.name} —Å—Ç–∞—Ä—Ç—É–≤–∞–ª–∞! \n<b>{start} - {end}</b>"

        return template.format(start=start, end=end)
    

class StartNotificationScheduler:
    
    def __init__(self) -> None:
        self.scheduler = AsyncIOScheduler()    

    async def start(self) -> None:
        for league_type in TypeLeague:
            await self._schedule_league_notification(league_type)
        self.scheduler.start()
        
    async def _schedule_league_notification(
        self, 
        league_type: TypeLeague
    ) -> None:
        config = GetConfig.get_config(league_type)
        self.scheduler.add_job(
            func=NotificationStartLeague.notify_start_league,
            args=[league_type],
            trigger=config.TRIGGER_SEND_MESSAGE_START,
            misfire_grace_time=10
        )