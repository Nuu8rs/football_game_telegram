from abc import ABC, abstractmethod

from database.models.character import Character
from database.models.club import Club

from services.club_service import ClubService
from services.best_20_club_league_service import Best20ClubLeagueService

from loader import bot
from utils.rate_limitter import rate_limiter

class SendInformationToClub(ABC):
    
    def __init__(self, clubs: list[Club]) -> None:
        self.clubs: list[Club] = clubs
    
    @abstractmethod
    async def send_info_to_clubs(self):
        pass
    
    @rate_limiter
    async def _send_message_to_character(
        self,
        character: Character,
        message: str
    ):
        try:
            if character.is_bot:
                return
            
            await bot.send_message(
                chat_id=character.characters_user_id,
                text=message
            )
        except Exception as E:
            pass

        
    @property
    def all_users(self) -> list[Character]:
        return [character for club in self.clubs for character in club.characters]



class SendEndMatch(SendInformationToClub):

    TEMPLATE = """
    üî• –ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–π –º–∞—Ç—á –º—ñ–∂ –¥–≤–æ–º–∞ –∫–ª—É–±–∞–º–∏ ‚Äî <b>{team_1}</b> —Ç–∞ <b>{team_2}</b>! ‚öîÔ∏è
    
    üí• –¶–µ –¥–≤–∞ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à—ñ —Ç–∞ –Ω–∞–π—Å—Ç—ñ–π–∫—ñ—à—ñ –∫–ª—É–±–∏, —è–∫—ñ –¥–æ–≤–µ–ª–∏ —Å–≤–æ—é –º—ñ—Ü—å –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ —Å–µ–∑–æ–Ω—É! üí™
    
    {team_1} ‚Äî –∫–æ–º–∞–Ω–¥–∞, —è–∫–∞ —Å–ª–∞–≤–∏—Ç—å—Å—è —Å–≤–æ—î—é –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ—é –∞—Ç–∞–∫—É—é—á–æ—é –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é —Ç–∞ –±–µ–∑–∂–∞–ª—ñ—Å–Ω–æ—é –≥—Ä–æ—é –Ω–∞ –ø–æ–ª—ñ. ‚ö°Ô∏è –á—Ö–Ω—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–∞ —Ä–æ–±–æ—Ç–∞ –Ω–µ —Ä–∞–∑ –ø—Ä–∏–≤–æ–¥–∏–ª–∏ —ó—Ö –¥–æ –ø–µ—Ä–µ–º–æ–≥ —É –Ω–∞–π–Ω–∞–ø—Ä—É–∂–µ–Ω—ñ—à–∏—Ö –º–∞—Ç—á–∞—Ö. üèÜ
    
    {team_2}, —Å–≤–æ—î—é —á–µ—Ä–≥–æ—é, –≤—ñ–¥–æ–º—ñ —Å–≤–æ—î—é –Ω–µ–ø–æ—Ö–∏—Ç–Ω–æ—é –æ–±–æ—Ä–æ–Ω–æ—é —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. üõ°Ô∏è –¶–µ–π –∫–ª—É–± –∑–∞–≤–∂–¥–∏ –±–æ—Ä–µ—Ç—å—Å—è –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ, –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ –∑–¥–∞—î—Ç—å—Å—è, —â–æ —Å–∏–ª–∏ –Ω–∞ –≤–∏—Ö–æ–¥—ñ. ‚öîÔ∏è
    
    üéâ –°—å–æ–≥–æ–¥–Ω—ñ –º–∏ –¥—ñ–∑–Ω–∞—î–º–æ—Å—å, —Ö—Ç–æ –∑ —Ü–∏—Ö –≤–µ–ª–∏—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —Å—Ç–∞–Ω–µ –ø–µ—Ä–µ–º–æ–∂—Ü–µ–º, —Ö—Ç–æ –∑–∞–±–µ—Ä–µ —Ç–∏—Ç—É–ª —ñ —É–≤—ñ—á–Ω–∏—Ç—å —Å–≤–æ—î —ñ–º'—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó! üìú –í—Å–µ –≤–∏—Ä—ñ—à–∏—Ç—å—Å—è —Ç—É—Ç —ñ –∑–∞—Ä–∞–∑! ‚è≥
    """

    def __init__(
        self, 
        clubs: list[Club],
        best_2_clubs: list[Club]
        ) -> None:
        self.best_2_clubs = best_2_clubs
        super().__init__(clubs)

    
    async def send_info_to_clubs(self):
        for character in self.all_users:
            await self._send_message_to_character(
                character=character,
                message=self.text_end_match
            )


    @property
    def text_end_match(self) -> str:
        return self.TEMPLATE.format(
            team_1=self.best_2_clubs[0].name_club,
            team_2=self.best_2_clubs[1].name_club
        )
        
class SendCongratulationEndMatch(SendInformationToClub):
    TEMPLATE = """
üéâüèÜ –í–Ü–¢–ê–Ñ–ú–û –ö–û–ú–ê–ù–î–£ <b>{team_winner}</b> –ó –ì–†–ê–ù–î–Ü–û–ó–ù–û–Æ –ü–ï–†–ï–ú–û–ì–û–Æ!üèÜüéâ

üí• –í–∏ –¥–æ–≤–µ–ª–∏, —â–æ —Å–ø—Ä–∞–≤–∂–Ω—è –º—ñ—Ü—å —ñ –∫–æ–º–∞–Ω–¥–Ω–∏–π –¥—É—Ö –∑–¥–∞—Ç–Ω—ñ —Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏–≤–∞ –Ω–∞ –ø–æ–ª—ñ! üåü –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –º–∞—Ç—á —Å—Ç–∞–≤ —Å–ø—Ä–∞–≤–∂–Ω—ñ–º —Ç—Ä—ñ—É–º—Ñ–æ–º –≤–∞—à–æ—ó –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤–æ—Å—Ç—ñ, –º–∞–π—Å—Ç–µ—Ä–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ –≥–µ–Ω—ñ—è. ‚öΩÔ∏èüí™

–í–∞—à—ñ –≤–±–æ–ª—ñ–≤–∞–ª—å–Ω–∏–∫–∏ –ø–∏—à–∞—é—Ç—å—Å—è –≤–∞–º–∏, –∞ —Ü–µ–π —Ç—Ä—ñ—É–º—Ñ —É–≤—ñ–π–¥–µ –≤ —ñ—Å—Ç–æ—Ä—ñ—é —è–∫ —Å–∏–º–≤–æ–ª –Ω–µ–ø–µ—Ä–µ–≤–µ—Ä—à–µ–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–æ–ª—ñ –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏! üôåüî•

ü•Ç –ù–µ—Ö–∞–π —Ü–µ–π —É—Å–ø—ñ—Ö —Å—Ç–∞–Ω–µ –ª–∏—à–µ –ø–æ—á–∞—Ç–∫–æ–º –Ω–æ–≤–∏—Ö –∑–≤–µ—Ä—à–µ–Ω—å —ñ –ø—Ä–∏–≤–æ–¥–æ–º –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –ø–µ—Ä–µ–º–æ–≥! üöÄ

<b>{team_winner}</b> ‚Äî –ß–ï–ú–ü–Ü–û–ù–ò! üëë
    """
    
    def __init__(self) -> None:
        clubs:list[Club] = []
        super().__init__(clubs)
        self.winner_club: Club = None
        
    async def get_winner_club(self):
        last_match = await Best20ClubLeagueService.get_end_last_match()
        if last_match.total_points_first_club > last_match.total_points_second_club:
            self.winner_club = last_match.first_club
        else:
            self.winner_club = last_match.second_club
            
    async def send_info_to_clubs(self):
        all_clubs = await ClubService.get_all_clubs()
        await self.get_winner_club()
        self.clubs = [club for club in all_clubs if not club.is_fake_club]
        
        for character in self.all_users:
            await self._send_message_to_character(
                character=character,
                message=self.text_end_match
            )
    
    @property
    def text_end_match(self) -> str:
        return self.TEMPLATE.format(
            team_winner = self.winner_club.name_club
        )