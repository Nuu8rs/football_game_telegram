from aiogram import Bot
from aiohttp.web import Response
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from bot.routers.stores.vip_pass.types import VipPassTypes, vip_passes

from database.models.payment.vip_pass_payment import VipPassPayment

from services.payment_service import PaymentServise
from services.character_service import CharacterService

from webhook_api.schemas import MonoResultSchema

from config import BOT_TOKEN

from ..base_endpoint import EndPoint, HTTPMethod


class MonoResultVipPass(EndPoint):
    schema = MonoResultSchema
    data: MonoResultSchema
    method = HTTPMethod.POST
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    type_payment = VipPassPayment

    TEXT_TEMPLATE = """
<b>–í—ñ—Ç–∞—î–º–æ, —Ç–∏ —Å—Ç–∞–≤ VIP –Ω–∞ {duration} –¥–Ω—ñ–≤!</b>

–¢–µ–ø–µ—Ä —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à –±–µ–∑–ª—ñ—á –ø–µ—Ä–µ–≤–∞–≥ —É –≥—Ä—ñ, —â–æ–± —Å—Ç–∞–≤–∞—Ç–∏ —â–µ —Å–∏–ª—å–Ω—ñ—à–∏–º —Ç–∞ —à–≤–∏–¥—à–∏–º! –û—Å—å —â–æ —á–µ–∫–∞—î –Ω–∞ —Ç–µ–±–µ:

- <b>+150 –µ–Ω–µ—Ä–≥—ñ—ó</b> —â–æ–¥–Ω—è ‚Äî —Ç–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —â–µ –±—ñ–ª—å—à–µ —á–∞—Å—É —É –≥—Ä—ñ —Ç–∞ –¥–æ—Å—è–≥–∞—Ç–∏ –≤–µ–ª–∏–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤!
- <b>–•2 –Ω–∞–≥–æ—Ä–æ–¥</b> –∑ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É ‚Äî –ø–æ–¥–≤–æ—é–π —Å–≤–æ—ó –±–æ–Ω—É—Å–∏ —Ç–∞ –ø—Ä–æ–∫–∞—á—É–π—Å—è —à–≤–∏–¥—à–µ!
- <b>+5% —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å</b> ‚Äî —Ç–≤–æ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É—Ç—å —â–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–º–∏!
- <b>VIP —Å—Ç–∞—Ç—É—Å</b> ‚Äî —Ç–≤—ñ–π –Ω—ñ–∫ —Ç–µ–ø–µ—Ä –≤–∏–¥—ñ–ª—è—î—Ç—å—Å—è —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö!

–¢–∏ –∑—Ä–æ–±–∏–≤ –≤–µ–ª–∏–∫–∏–π –∫—Ä–æ–∫ –¥–æ —Ç–æ–≥–æ, —â–æ–± —Å—Ç–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–º —É –≥—Ä—ñ! –ë–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—ñ–≤, —Ç–≤–æ—è VIP-–ø–æ–¥–æ—Ä–æ–∂ —Ç—ñ–ª—å–∫–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! ‚öΩüíé
"""

    

    async def handle_request(self) -> Response:
        payment:VipPassPayment = await PaymentServise.get_payment(
            order_id=self.data.invoiceId,
            type_payment = self.type_payment
            )
        
        if not payment:
            return
        
        if self.data.status != "success":
            return
        
        if payment.payment.status:
            return
        
        duration = vip_passes.get(payment.type_vip_pass).duration
        
        
        character = await CharacterService.get_character(payment.payment.user_id)
        await CharacterService.update_vip_pass_time(
            character = character,
            day_vip_pass = duration
        )
        await self.bot.send_message(
            chat_id = payment.payment.user_id,
            text    = self.TEXT_TEMPLATE.format(
                duration = duration
            )
        )
        await PaymentServise.change_payment_status(order_id=self.data.invoiceId)
        return self.OK()
        


