from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from database.models.character import Character

from services.club_service import ClubService

from bot.states.club_states import SendMessageMembers
from bot.callbacks.club_callbacks import TransferOwner, DeleteClub
from bot.keyboards.club_keyboard import transfer_club_owner_keyboard, definitely_delete_club_keyboard

from utils.club_utils import send_message_characters_club

from loader import logger
owner_option_club_router = Router()


@owner_option_club_router.callback_query(F.data == "send_message_all_member_club")
async def get_message_to_member_club(query: CallbackQuery, state: FSMContext, character: Character):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–ª—É–±—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")
    
    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–ª—É–±—É, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
    await query.message.answer("<b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>, —ñ –≤–æ–Ω–æ –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –≤–∞—à–æ–≥–æ –∫–ª—É–±—É")
    await state.set_state(SendMessageMembers.send_message_members)
    

@owner_option_club_router.message(SendMessageMembers.send_message_members)
async def send_message_all_member_club(message: Message, state: FSMContext, character: Character):
    if not character.club_id:
        return await message.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–ª—É–±—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await message.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–ª—É–±—É, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    
    for character_club in club.characters:
        if character.characters_user_id == character_club.characters_user_id:
            continue
        try:
            await message.copy_to(
                chat_id=character_club.characters_user_id
            )            
        except Exception as E:
            logger.error(f"–ù–ï –°–ú–û–ì –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï {character.name}")
    await state.clear()
    
@owner_option_club_router.callback_query(F.data == "transfer_rights")
async def transfer_rights_club(query: CallbackQuery, character: Character):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–ª—É–±—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–ª—É–±—É")
    
    if len(club.characters) == 1:
        return await query.message.answer("–£ –≤–∞—Å —É –∫–ª—É–±—ñ –Ω–µ–º–∞—î —Ç–æ–≥–æ, –∫–æ–º—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ª—ñ–¥–µ—Ä–∞")
    
    await query.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —è–∫–æ–º—É –≤–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∞—à –∫–ª—É–±",
                               reply_markup=transfer_club_owner_keyboard(club))
    
@owner_option_club_router.callback_query(TransferOwner.filter())
async def transfer_owner_club(query: CallbackQuery, character: Character, callback_data: TransferOwner):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–ª—É–±—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–ª—É–±—É")
    
    await ClubService.transfer_club_owner(
        club=club,
        new_owner_id=callback_data.user_id_new_owner
    )
    character_owner = [character for character in club.characters if character.characters_user_id == callback_data.user_id_new_owner][0]
    await query.message.answer(f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ª–∏–¥–µ—Ä–∞ {character_owner.name}")
    await send_message_characters_club(
        characters_club=club.characters,
        my_character=character,
        text=f"üë§ <b>–õ—ñ–¥–µ—Ä –∫–ª—É–±—É –∑–º—ñ–Ω–∏–≤—Å—è –∑ {character.name} -> {character_owner.name}</b>"
    )
    
@owner_option_club_router.callback_query(F.data == "delete_my_club")
async def delete_my_club(query: CallbackQuery, character: Character):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–ª—É–±—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–ª—É–±—É")
    
    await query.message.answer("–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—É–±?",
                               reply_markup=definitely_delete_club_keyboard(club.id))

    
@owner_option_club_router.callback_query(DeleteClub.filter())
async def delete_my_club(query: CallbackQuery, character: Character, callback_data: DeleteClub):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–ª—É–±—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=callback_data.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–ª—É–±—É")
    
    await send_message_characters_club(
        characters_club=club.characters,
        my_character=character,
        text=f"üò¢ –ö–ª—É–± –±—ã–ª —É–¥–∞–ª–µ–Ω"
    )
    await ClubService.remove_all_characters_from_club(club)
    await query.message.delete()
    await query.message.answer("–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ —Å–≤—ñ–π –∫–ª—É–±")