from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.models.character import Character

from services.club_service import ClubService
from services.character_service import CharacterService
from services.match_character_service import MatchCharacterService
from services.league_services.league_service import LeagueService

from bot.states.club_states import SendMessageMembers, EditDescriptionClub
from bot.callbacks.club_callbacks import TransferOwner, DeleteClub, SelectSchema, KickMember
from bot.keyboards.club_keyboard import (
    transfer_club_owner_keyboard, 
    definitely_delete_club_keyboard, 
    select_schema_keyboard, 
    select_user_kick
)

from utils.club_utils import send_message_characters_club, get_text_schemas, text_schemas

from datetime import timedelta, datetime
from config import EPOCH_ZERO
from loader import bot
from logging_config import logger

owner_option_club_router = Router()


@owner_option_club_router.callback_query(F.data == "send_message_all_member_club")
async def get_message_to_member_club(query: CallbackQuery, state: FSMContext, character: Character):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")
    
    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        
    await query.message.answer("<b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>, —ñ –≤–æ–Ω–æ –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–µ –≤—Å—ñ–º —É—á–∞—Å–Ω–∏–∫–∞–º –≤–∞—à–æ–π –∫–æ–º–∞–Ω–¥–∏")
    await state.set_state(SendMessageMembers.send_message_members)
    

@owner_option_club_router.message(SendMessageMembers.send_message_members)
async def send_message_all_member_club(message: Message, state: FSMContext, character: Character):
    if not character.club_id:
        return await message.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await message.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    
    for character_club in club.characters:
        if character.characters_user_id == character_club.characters_user_id:
            continue
        try:
            await message.copy_to(
                chat_id=character_club.characters_user_id
            )            
        except Exception as E:
            logger.error(f"–ù–ï –°–ú–û–ì –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï {character.character_name}")
    await state.clear()
    
@owner_option_club_router.callback_query(F.data == "transfer_rights")
async def transfer_rights_club(query: CallbackQuery, character: Character):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    if len(club.characters) == 1:
        return await query.message.answer("–£ –≤–∞—Å —É –∫–æ–º–∞–Ω–¥—ñ –Ω–µ–º–∞—î —Ç–æ–≥–æ, –∫–æ–º—É –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ª—ñ–¥–µ—Ä–∞")
    
    await query.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —è–∫–æ–º—É –≤–∏ –ø–µ—Ä–µ–¥–∞—Å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É",
                               reply_markup=transfer_club_owner_keyboard(club))
    
@owner_option_club_router.callback_query(TransferOwner.filter())
async def transfer_owner_club(query: CallbackQuery, character: Character, callback_data: TransferOwner):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    await ClubService.transfer_club_owner(
        club=club,
        new_owner_id=callback_data.user_id_new_owner
    )
    character_owner = [character for character in club.characters if character.characters_user_id == callback_data.user_id_new_owner][0]
    await query.message.answer(f"–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –ª–∏–¥–µ—Ä–∞ {character_owner.character_name}")
    await send_message_characters_club(
        characters_club=club.characters,
        my_character=character,
        text=f"üë§ <b>–õ—ñ–¥–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –∑–º—ñ–Ω–∏–≤—Å—è –∑ {character.character_name} -> {character_owner.character_name}</b>"
    )
    
@owner_option_club_router.callback_query(F.data == "delete_my_club")
async def delete_my_club(query: CallbackQuery, character: Character):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    await query.message.answer("–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É?",
                               reply_markup=definitely_delete_club_keyboard(club.id))

    
@owner_option_club_router.callback_query(DeleteClub.filter())
async def delete_my_club(query: CallbackQuery, character: Character, callback_data: DeleteClub):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=callback_data.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    await send_message_characters_club(
        characters_club=club.characters,
        my_character=character,
        text=f"üò¢ –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"
    )
    await ClubService.remove_all_characters_from_club(club)
    await query.message.delete()
    await query.message.answer("–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É")
    
    
@owner_option_club_router.callback_query(F.data == "change_schema_club")
async def switch_schema_club(query: CallbackQuery, character: Character):
    text_current_chema = get_text_schemas(character.club)
    
    await query.message.answer(text = text_current_chema,
                               reply_markup=select_schema_keyboard())
    
@owner_option_club_router.callback_query(SelectSchema.filter())
async def select_schema(query: CallbackQuery, character: Character, callback_data: SelectSchema):
    if character.club.schema == callback_data.select_schema:
        return await query.answer("–£ –≤–∞—Å —ñ —Ç–∞–∫ –æ–±—Ä–∞–Ω–æ —Ü—é —Å—Ö–µ–º—É", show_alert=True)

    if character.club.time_edit_schema != EPOCH_ZERO and character.club.time_edit_schema + timedelta(days=3) > datetime.now():
        return await query.answer("–î–ª—è –∑–º—ñ–Ω–∏ —Å—Ö–µ–º–∏ –º–∞—î –º–∏–Ω—É—Ç–∏ 3 –¥–Ω—ñ", show_alert=True)
    
    
    await ClubService.edit_schemas(club= character.club, new_schema=callback_data.select_schema)
    await query.message.answer(f"–í–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ¬´{text_schemas[callback_data.select_schema]}¬ª")
    await query.message.answer("<b>–°–ø–æ–≤—ñ—â–∞—é –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ —Ç–µ —â–æ –≤–∏ –∑–º—ñ–Ω–∏–ª–∏ —Å—Ö–µ–º—É</b>, —É—Å—ñ–º —Ö—Ç–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ –º–∞—Ç—á, <b>—Ç—Ä–µ–±–∞ –±—É–¥–µ —â–µ —Ä–∞–∑ –∑–∞–π—Ç–∏ –≤ –º–∞—Ç—á</b> –∑–∞ –Ω–æ–≤–æ—é —Å—Ö–µ–º–æ—é")
    await notification_switch_schema(
        club_id=character.club_id,
        my_character=character
    )
    
    
async def notification_switch_schema(club_id: int, my_character: Character):
    club = await ClubService.get_club(club_id)
    current_matches_today = await LeagueService.get_match_today(club_id=club.id)
    await send_message_characters_club(
        characters_club=club.characters,
        my_character=my_character,
        text="<b>–õ—ñ–¥–µ—Ä –∫–æ–º–∞–Ω–¥–∏ –∑–º—ñ–Ω–∏–≤ —Å—Ö–µ–º—É</b>\n\n"+get_text_schemas(club)
    )
    for current_match_today in current_matches_today:
        for character in club.characters:
            await MatchCharacterService.delete_character_from_match(
                    character_id=character.id,
                    match_id=current_match_today.match_id
                )

    
@owner_option_club_router.callback_query(F.data == "kick_user")
async def kick_user_handler(query: CallbackQuery, character: Character):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    members_club = [member_character for member_character in club.characters if member_character.id != character.id] 
    await query.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–≥–Ω–∞—Ç–∏",
                               reply_markup=select_user_kick(members_club))
    
    
    
            
@owner_option_club_router.callback_query(KickMember.filter())
async def select_user_from_kick_handler(query: CallbackQuery, character: Character, callback_data: KickMember):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    if callback_data.character_id not in [character.id for character in club.characters]:
        return await query.answer("‚ùå –¶—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤ –∫–æ–º–∞–Ω–¥—ñ")
    
    await ClubService.remove_character_from_club(
        character_id=callback_data.character_id
    )
    character_kick = await CharacterService.get_character_by_id(
        character_id=callback_data.character_id
    )
    await query.message.answer(f"–í–∏ –≤–∏–≥–Ω–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - {character_kick.character_name}")
    await query.bot.send_message(chat_id=character_kick.characters_user_id,
                                 text=f"–ö–∞–ø—ñ—Ç–∞–Ω –ø—Ä–∏–π–Ω—è–≤ —Ä—ñ—à–µ–Ω–Ω—è, –≤–∏ –±—ñ–ª—å—à–µ –Ω–µ –≤ –∫–æ–º–∞–Ω–¥—ñ [{club.name_club}]")
    

@owner_option_club_router.callback_query(
    F.data == "description_club"
)
async def edit_description_club_handler(
    query: CallbackQuery, 
    character: Character,
    state: FSMContext
):
    if not character.club_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await query.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    await state.set_state(EditDescriptionClub.send_new_description)
    await query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –∫–æ–º–∞–Ω–¥–∏")

@owner_option_club_router.message(EditDescriptionClub.send_new_description)
async def edit_description_club_handler(
    message: Message, 
    state: FSMContext,
    character: Character
):
    if not character.club_id:
        return await message.answer("‚ùå –í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç")

    club = await ClubService.get_club(club_id=character.club_id)
    if club.owner_id != character.characters_user_id:
        return await message.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
    
    await ClubService.update_description_club(
        club_id=club.id,
        new_description=message.text
    )
    
    await message.answer("–í–∏ –∑–º—ñ–Ω–∏–ª–∏ –æ–ø–∏—Å –∫–æ–º–∞–Ω–¥–∏, —Ç–µ–ø–µ—Ä –≤—ñ–Ω –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫üîΩ\n\n" + message.text)
    await state.clear()