from aiogram import Router, Bot, F
from aiogram.types import Message, CallbackQuery

from datetime import datetime

from database.models.user_bot import UserBot
from database.models.character import Character

from services.character_service import CharacterService
from services.reminder_character_service import RemiderCharacterService

from bot.keyboards.gym_keyboard import select_type_gym, select_time_to_gym, menu_gym, leave_from_gym_keyboard
from bot.callbacks.gym_calbacks import SelectGymType, SelectTimeGym

from constants import GYM_PHOTO, const_name_characteristics, const_energy_by_time
from schedulers.scheduler_gym import GymTaskScheduler


gym_router = Router()

@gym_router.message(F.text == "üñ≤ –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω–∏–π –∑–∞–ª")
async def go_to_gym(message: Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ —Ç–µ–±–µ —É —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º—É –∑–∞–ª—ñ! –ü—ñ—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –Ω–∞–≤–∏—á–∫–∏? –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é —É –º–∞—Å–∞–∂–Ω–æ–º—É –∑–∞–ª—ñ? –û–±–∏—Ä–∞—Ç–∏ —Ç–æ–±—ñ!", reply_markup=menu_gym())
    
@gym_router.message(F.text == "üß§ –ü—ñ—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
async def go_to_gym(message: Message):
    await message.answer_photo(
        photo=GYM_PHOTO,
        caption="–í–∏–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–∫–∞—á–∞—Ç–∏",
        reply_markup=select_type_gym())
    
@gym_router.callback_query(SelectGymType.filter())
async def select_position_character(query: CallbackQuery, callback_data:SelectGymType):
    await query.message.edit_caption(
        caption="""
<b>30 —Ö–≤–∏–ª–∏–Ω</b>, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>25%</b>  
–í–∞—Ä—Ç—ñ—Å—Ç—å - <b>10</b> –µ–Ω–µ—Ä–≥—ñ—ó 

<b>60</b> —Ö–≤–∏–ª–∏–Ω, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>35%</b>  
–í–∞—Ä—Ç—ñ—Å—Ç—å - <b>20</b> –µ–Ω–µ—Ä–≥—ñ—ó

<b>90</b> —Ö–≤–∏–ª–∏–Ω, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>50%</b>  
–í–∞—Ä—Ç—ñ—Å—Ç—å - <b>40</b> –µ–Ω–µ—Ä–≥—ñ—ó

<b>120</b> —Ö–≤–∏–ª–∏–Ω, —à–∞–Ω—Å –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫–∏ <b>65%</b> 
–í–∞—Ä—Ç—ñ—Å—Ç—å - <b>60</b> –µ–Ω–µ—Ä–≥—ñ—ó""",
        reply_markup=select_time_to_gym(callback_data.gym_type)
    )
    
@gym_router.callback_query(F.data == "back_to_select_gym_type")
async def select_position_character(query: CallbackQuery):
    await query.message.edit_caption(
        caption="–í–∏–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–∫–∞—á–∞—Ç–∏",
        reply_markup=select_type_gym())

    
@gym_router.callback_query(SelectTimeGym.filter())
async def start_gym(query: CallbackQuery, callback_data:SelectTimeGym, user: UserBot, character: Character):
    if character.reminder.character_in_training:
        return await query.message.reply("<b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —ñ —Ç–∞–∫ —É–∂–µ —Ç—Ä–µ–Ω—É—î—Ç—å—Å—è</b>")
    
    if character.current_energy < const_energy_by_time[callback_data.gym_time]:
        try:
            return await query.message.answer(
                text="<b>–£ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó —â–æ–± –ø—ñ—Ç–∏ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –≤–∏–±–µ—Ä–∏ —ñ–Ω—à–∏–π —á–∞—Å, a–±–æ –≤—ñ–¥–Ω–æ–≤–∏ –µ–Ω–µ—Ä–≥—ñ—é —É –º–∞—Å—Å–∞–∂–Ω–æ–º—É —Å–∞–ª–æ–Ω—É</b>",
            )
        except:
            return
    
    await query.message.edit_caption(caption="–ü–æ—á–∏–Ω–∞—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - {type_gym}\n\n"\
                                     "–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - {end_time} —Ö–≤.\n"\
                                     "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –≤ {end_time_full}".format(
                                         type_gym = const_name_characteristics[callback_data.gym_type],
                                         end_time = int(callback_data.gym_time.total_seconds() / 60),
                                         end_time_full = (datetime.now() + callback_data.gym_time).strftime("%d-%m-%Y, %H:%M")
                                     )
                                     ,reply_markup=None)
    scheduler = GymTaskScheduler()
    await scheduler.add_job_gym(
        character=character,
        time_job_gym=callback_data.gym_time,
        type_characteristics=callback_data.gym_type
    )
    await RemiderCharacterService.update_training_info(
        character_id=character.id,
        training_stats=callback_data.gym_type,
        time_start_training=datetime.now(),
        time_training_seconds=callback_data.gym_time.total_seconds()
    )
    await RemiderCharacterService.toggle_character_training_status(
        character_id=character.id,
        
    )
    
    await CharacterService.consume_energy(
        character_obj=character,
        energy_consumed=const_energy_by_time[callback_data.gym_time]
    )
    

@gym_router.callback_query(F.data == "get_out_of_gym")
async def leave_from_gym(query: CallbackQuery, character: Character):
    await RemiderCharacterService.toggle_character_training_status(character_id=character.id)
    await RemiderCharacterService.update_training_info(character_id=character.id)
    await query.message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
