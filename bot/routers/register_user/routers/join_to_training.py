import asyncio
from datetime import datetime, timedelta
from aiogram import F, Router
from aiogram.types import (
    Message, 
    CallbackQuery,
)

from database.models.user_bot import STATUS_USER_REGISTER
from database.models.character import Character
from database.events.event_new_member_exp import EXP_CONSTANT
from bot.keyboards.menu_keyboard import main_menu
from bot.routers.register_user.config import (
    PHOTO_STAGE_REGISTER_USER,
    TEXT_STAGE_REGISTER_USER
)
from bot.callbacks.gym_calbacks import SelectGymType

from schedulers.scheduler_gym_rasks import GymScheduler
from services.user_service import UserService
from services.reminder_character_service import RemniderCharacterService
from services.club_infrastructure_service import ClubInfrastructureService

from constants import (
    const_name_characteristics,
    TOTAL_POINTS_ADD_NEW_MEMBER,
    PHOTO_NEW_BONUS_MEMBER_HAR,
    GYM_PHOTO
)

from ..message_new_member import SendMessageNewMember
from .new_member_bonus import get_new_member_bonus_handler
from .claim_training_center import claim_training_center_handler

first_training_router = Router()

TEMPLATE_STARTER_POWER_POINTS = f"""
üéâ <b>–í—ñ—Ç–∞—î–º–æ –≤ –≥—Ä—ñ, –Ω–æ–≤–∞—á–∫—É!</b> 

–ó–∞ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à <u>{TOTAL_POINTS_ADD_NEW_MEMBER} –æ—á–æ–∫ –°–∏–ª–∏</u> ‚Äî —Ç–≤—ñ–π —Å—Ç–∞—Ä—Ç–æ–≤–∏–π –±–æ–Ω—É—Å! üöÄ

–©–æ –¥–∞–ª—ñ?
‚ö° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –°–∏–ª—É –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —ñ –º–∞—Ç—á—ñ
üèÜ –†–æ–∑–≤–∏–≤–∞–π—Å—è —ñ —Å—Ç–∞–≤–∞–π —Å–∏–ª—å–Ω—ñ—à–∏–º —â–æ–¥–Ω—è

<b>–Ü –ø–∞–º'—è—Ç–∞–π:</b> –∫–æ–ª–∏ –∑–±–µ—Ä–µ—à <u>{EXP_CONSTANT} –î–æ—Å–≤—ñ–¥—É</u>, –Ω–∞ —Ç–µ–±–µ —á–µ–∫–∞—Ç–∏–º–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π <b>–ë–æ–∫—Å –∑ –Ω–∞–≥–æ—Ä–æ–¥–∞–º–∏</b>! üéÅ

<b>–¢–≤–æ—è –ø—Ä–∏–≥–æ–¥–∞ —Ç—ñ–ª—å–∫–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è. –í–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ–º–æ–≥!</b> üî•
"""

TEXT_LAST_STEP = """
üîπ <b>–¢—Ä–µ–Ω–µ—Ä:</b>
‚Äî –û—Å—å —ñ –≤—Å–µ, —á–µ–º–ø—ñ–æ–Ω–µ! –¢–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó –≥—Ä–∏. ‚öΩÔ∏èüî•
–¢–µ–ø–µ—Ä –≥–æ–ª–æ–≤–Ω–µ ‚Äî –Ω–µ –∑—É–ø–∏–Ω—è–π—Å—è:

‚úÖ <b>–í—Å—Ç—É–ø–∞–π —É –º–∞—Ç—á—ñ</b> ‚Äî —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É <b>"–ú–∞—Ç—á—ñ"</b> ‚Üí <b>"–ú–∞—Ç—á—ñ –ª—ñ–≥–∏"</b>, —Å—Ç–∞—Ä—Ç –æ 21:00 –∫–æ–∂–µ–Ω –¥–µ–Ω—å.
‚úÖ <b>–¢—Ä–µ–Ω—É–π—Å—è —â–æ–¥–Ω—è</b>, —â–æ–± –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ —Å–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è ‚Äî –∫–Ω–æ–ø–∫–∞ <b>"–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"</b>
‚úÖ <b>–Ü –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏:</b>
üëâ <a href="https://t.me/tgfootballchat/2">–ß–ê–¢- –°–ø—ñ–ª—å–Ω–æ—Ç–∞</a> ‚Äî —Ç—É—Ç —Ç–æ–±—ñ –∑–∞–≤–∂–¥–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å, –ø—ñ–¥–∫–∞–∂—É—Ç—å —ñ –ø—ñ–¥—Ç—Ä–∏–º–∞—é—Ç—å!

<b>–£–¥–∞—á—ñ –Ω–∞ –ø–æ–ª—ñ! üí™</b>
–ü–∞–º‚Äô—è—Ç–∞–π: <i>—Å–ø—Ä–∞–≤–∂–Ω—ñ –ª–µ–≥–µ–Ω–¥–∏ –≤–∏—Ä–æ—Å—Ç–∞—é—Ç—å –∑ –ø–µ—Ä—à–æ–≥–æ –º–∞—Ç—á—É.</i>
"""

TEXT_SECOND_STEP = """
‚úÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫ –ø–µ—Ä–µ–¥ –≥—Ä–æ—é!

–¢–∏ –≤–∂–µ –º–∞–π–∂–µ –Ω–∞ –ø–æ–ª—ñ ‚Äî –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∑–æ–≤—Å—ñ–º —Ç—Ä–æ—Ö–∏:

‚öΩÔ∏è –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –≤ –º–∞—Ç—á ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ –æ 21:00
üìç –ú–∞—Ç—á—ñ ‚Üí –°—Ç–∞–¥—ñ–æ–Ω ‚Üí –õ—ñ–≥–∞

üí¨ –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤:
üëâ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç —Ç–∞ —á–∞—Ç —Å–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏ ‚Äî —É —Ä–æ–∑–¥—ñ–ª—ñ "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è"

üéØ –ì–æ—Ç–æ–≤–æ? –¢–µ–ø–µ—Ä —Ç–∏ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å. –í–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä—à–æ—ó –ø–µ—Ä–µ–º–æ–≥–∏! üí™
"""


async def join_to_training(
    message: Message,
    character: Character
) -> None:
    await asyncio.sleep(6)
    new_status = STATUS_USER_REGISTER.FIRST_TRAINING
    
    await UserService.edit_status_register(
        user_id=character.characters_user_id,
        status=new_status
    )
    user = await UserService.get_user(
        user_id=character.characters_user_id
    )
    await message.answer_photo(
        caption = TEXT_STAGE_REGISTER_USER[new_status],
        photo   = PHOTO_STAGE_REGISTER_USER[new_status],
        reply_markup = main_menu(user)
    )


@first_training_router.callback_query(
    SelectGymType.filter(
        F.new_user == True
    )
)
async def select_gym_type_first_training(
    query: CallbackQuery,
    callback_data: SelectGymType,
    character: Character
) -> None:
    gym_type = callback_data.gym_type
    
    await query.message.delete()
    gym_time = timedelta(minutes=5)
    club_infrastructure = None
    if character.club_id:
        club_infrastructure = await ClubInfrastructureService.get_infrastructure(character.club_id)
    gym_scheduler = GymScheduler(
        character        = character,
        type_characteristic = gym_type,
        time_training       = gym_time,
        club_infrastructure = club_infrastructure
    )
    gym_scheduler.start_training()
    await RemniderCharacterService.update_training_info(
        character_id          = character.id,
        training_stats        = gym_type,
        time_start_training   = datetime.now(),
        time_training_seconds = gym_time.total_seconds()
    )
    await RemniderCharacterService.toggle_character_training_status(
        character_id=character.id,   
    )
    await claim_training_center_handler(
        character=character
    )
    # await SendMessageNewMember.send_message(character=character)
    # await asyncio.sleep(6)
    # asyncio.create_task(send_message_first_step(query, character))
    # asyncio.create_task(send_message_second_step(query.message))
    # asyncio.create_task(send_message_last_step(query.message))
    
# async def send_message_first_step(
#     query: CallbackQuery,
#     character: Character
# ):
#     await asyncio.sleep(15)
#     await query.message.answer_photo(
#         photo=PHOTO_NEW_BONUS_MEMBER_HAR,
#         caption = TEMPLATE_STARTER_POWER_POINTS,
#     )
#     await get_new_member_bonus_handler(
#         query,
#         character
#     )
    
# async def send_message_second_step(
#     message: Message
# ):
#     await asyncio.sleep(45)
#     await message.answer(
#         text = TEXT_SECOND_STEP
#     )

# async def send_message_last_step(
#     message: Message
# ):
#     await asyncio.sleep(310)
#     await message.answer(
#         text = TEXT_LAST_STEP
#     )