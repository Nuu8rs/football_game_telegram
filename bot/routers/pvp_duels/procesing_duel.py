from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from database.models.character import Character
from services.character_service import CharacterService

from bot.keyboards.gym_keyboard import no_energy_keyboard
from bot.callbacks.pvp_duel_callbacks import (
    SelectEnergyBit,
    SelectPositionAngle)

from pvp_duels.duel_manager import DuelManager
from pvp_duels.types import RoleDuel, PositionAngle

text_angle = {
    PositionAngle.UP    : "[‚¨ÜÔ∏è <b>–≤–µ—Ä—Ö–Ω—ñ–π –∫—É—Ç</b>]",
    PositionAngle.RIGHT : "[‚û°Ô∏è <b>–ø—Ä–∞–≤–∏–π –∫—É—Ç</b>]",
    PositionAngle.LEFT  : "[‚¨ÖÔ∏è <b>–ª—ñ–≤–∏–π –∫—É—Ç</b>]",
}

text_roles = {
    RoleDuel.FORWARD: (
        "–í–∏ –≤–∏–±—Ä–∞–ª–∏ —É–¥–∞—Ä —É {select_angle}! ‚öΩ\n"
        "–¢–µ–ø–µ—Ä —É—Å–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –≤–∞—à–æ—ó –º–∞–π—Å—Ç–µ—Ä–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä–µ–∞–∫—Ü—ñ—ó –≤–æ—Ä–æ—Ç–∞—Ä—è. "
        "–ß–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º'—è—á —É —Å—ñ—Ç–∫—É? ü•Ö"
    ),
    RoleDuel.GOALKEEPER: (
        "–í–∏ –≤–∏–±—Ä–∞–ª–∏ –≤—ñ–¥–±–∏—Ç–∏ –º'—è—á —É {select_angle}! üõ°Ô∏è\n"
        "–¢–µ–ø–µ—Ä –≤–∞—à–µ —Ä—ñ—à–µ–Ω–Ω—è –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ ‚Äî –∑–º–æ–∂–µ—Ç–µ –≤–∏ –∑—É–ø–∏–Ω–∏—Ç–∏ —É–¥–∞—Ä —Å—É–ø–µ—Ä–Ω–∏–∫–∞? ü§î"
    )
}

procesing_duel_router = Router()

@procesing_duel_router.callback_query(SelectEnergyBit.filter())
async def select_bit_user(query: CallbackQuery, character: Character, callback_data: SelectEnergyBit):
    pvp_duel = DuelManager.get_duel_by_id(callback_data.duel_id)

    if not pvp_duel:
        return await query.message.answer("‚ùå <b>–î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>")

    if callback_data.count_energy > character.current_energy:
        return await query.message.answer(
            text = "–£ –≤–∞—Å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó, –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é –≤ –ö—Ä–∞–º–Ω–∏—Ü—ñ –µ–Ω–µ—Ä–≥—ñ—ó",
            reply_markup = no_energy_keyboard()
        ) 

    is_user_1 = character.id == pvp_duel.user_1.id
    if (is_user_1 and pvp_duel.bid_user_1) or (not is_user_1 and pvp_duel.bid_user_2):
        return await query.message.answer("‚úÖ –í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ —Å—Ç–∞–≤–∫—É")

    if is_user_1:
        pvp_duel.bid_user_1 = callback_data.count_energy
    else:
        pvp_duel.bid_user_2 = callback_data.count_energy

    await CharacterService.consume_energy(
        character_id=character.id,
        energy_consumed=callback_data.count_energy
    )

    await query.message.edit_reply_markup(reply_markup=None)
    await query.message.answer(f"<b>–í–∏ –∑—Ä–æ–±–∏–ª–∏ —Å—Ç–∞–≤–∫—É</b> –≤ üîã {callback_data.count_energy} –µ–Ω–µ—Ä–≥—ñ—ó")

@procesing_duel_router.callback_query(SelectPositionAngle.filter())
async def select_bit_user(query: CallbackQuery, character: Character, callback_data: SelectPositionAngle):

    pvp_duel = DuelManager.get_duel_by_id(callback_data.duel_id)

    if not pvp_duel:
        return await query.message.answer("‚ùå <b>–î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>")

    is_user_1 = character.id == pvp_duel.user_1.id
    if (is_user_1 and pvp_duel.position_angle_user_1) or (not is_user_1 and pvp_duel.position_angle_user_2):
        return await query.message.answer("‚úÖ –í–∏ –≤–∂–µ –æ–±—Ä–∞–ª–∏ —Å—Ç–æ—Ä–æ–Ω—É")

    if is_user_1:
        pvp_duel.position_angle_user_1 = callback_data.position_angle
    else:
        pvp_duel.position_angle_user_2 = callback_data.position_angle
        
    my_role = pvp_duel.get_role_by_user(character)
    
    await query.message.edit_text(
        text=text_roles[my_role].format(select_angle = text_angle[callback_data.position_angle]),
        reply_markup=None
    )