import time
import random

from aiogram import Router, F
from aiogram.types import  Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.models.character import Character

from services.character_service import CharacterService

from bot.filters.donate_energy_filter import CheckTimeDonateEnergyMatch
from bot.callbacks.league_callbacks import EpizodeDonateEnergyToMatch
from bot.states.league_match_state import DonateEnergyInMatch
from bot.keyboards.gym_keyboard import no_energy_keyboard

from utils.photo_utils import get_photo, save_photo_id
from match.core.manager import ClubMatchManager
from match.entities import MatchData
from match.constans import (
    MIN_DONATE_ENERGY_TO_BONUS_KOEF,
    KOEF_DONATE_ENERGY,
    DONE_ENERGY_PHOTOS
)

from utils.club_utils import send_message_characters_club


add_energy_in_match_router = Router()

TEXT_EPIZODE_DONATE_ENERGY = """
‚ö°Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞</b>: <u>{name_club}</u> –∑—ñ–±—Ä–∞–ª–∞ <b>{min_donate_bonus_energy} –µ–Ω–µ—Ä–≥—ñ—ó</b> –≤ —Ü—å–æ–º—É –µ–ø—ñ–∑–æ–¥—ñ!  
üí™ –ó–∞–≤–¥—è–∫–∏ –∑—É—Å–∏–ª–ª—è–º –≥—Ä–∞–≤—Ü—ñ–≤, –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–∏–º—É—î <b>BOOST</b> +{koef_add_power_from_donat}% –¥–æ <b>—Å—É–º–∏ –¥–æ–Ω–∞—Ç—É</b>!

üîã <b>–ï–Ω–µ—Ä–≥—ñ—è ‚Äî —Ü–µ —Å–∏–ª–∞!</b> –ß–∏–º –±—ñ–ª—å—à–µ —ó—ó –í–∏ –≤–∫–ª–∞–¥–∞—î—Ç–µ –≤ –µ–ø—ñ–∑–æ–¥ —Ç–∏–º –±—ñ–ª—å—à–∏–π —à–∞–Ω—Å –∑–±–∏—Ç–∏ –≥–æ–ª!

üëü <b>–ì—Ä–∞—î–º–æ –¥–∞–ª—ñ</b> —Ç–∞ –π–¥–µ–º–æ –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏!
"""


@add_energy_in_match_router.callback_query(
    EpizodeDonateEnergyToMatch.filter(),
)
async def donate_energy_from_match_handler(
        query: CallbackQuery, 
        callback_data: EpizodeDonateEnergyToMatch, 
        character: Character,
        state: FSMContext
    ):

    if int(time.time()) > callback_data.time_end_goal:
        await query.answer("–ß–∞—Å –¥–ª—è —Ü—å–æ–≥–æ –≥–æ–ª—É –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è",
                                  show_alert= True)
        return await query.message.delete()
    
    
    if character.club_id is None:
        await query.answer("–í–∏ –Ω–µ –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—ñ", 
                                  show_alert = True)
        return await query.message.delete()
    
    
    match_data = ClubMatchManager.get_match(callback_data.match_id)
    if not match_data:
        return
    
    if character.id not in match_data.all_characters_user_ids_in_match:
        await query.answer("–í–∏ –Ω–µ –±–µ—Ä–µ—Ç–µ —É—á–∞—Å—Ç—å —É —Ü—å–æ–º—É –º–∞—Ç—á—ñ", show_alert=True)
        return await query.message.delete()
    
    
    await state.update_data(match_data = match_data)
    await state.update_data(end_time = callback_data.time_end_goal)
    await state.set_state(DonateEnergyInMatch.send_epizode_donate_energy)
    await query.message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—ñ–ª—å–∫–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—ó –≤ –ø–æ—Ç–æ—á–Ω–∏–π –º–∞—Ç—á\n1 –µ–Ω–µ—Ä–≥—ñ—è + 1 —Å–∏–ª–∞ –¥–æ –∫–æ–º–∞–Ω–¥–∏ –≤ –º–∞—Ç—á—ñ\n\n–ü–æ—Ç–æ—á–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è —É —Ç–µ–±–µ - {character.current_energy} üîã")
    

@add_energy_in_match_router.message(
    DonateEnergyInMatch.send_epizode_donate_energy,
    (F.text.func(str.isdigit)),
    CheckTimeDonateEnergyMatch()
)
async def donate_epizode_energy(
    message: Message,
    character: Character,
    state: FSMContext
):
    
    MIN_ENERGY_DONATE_MATCH = 10
    energy = int(message.text)
    if energy < MIN_ENERGY_DONATE_MATCH:
        await state.clear()
        return await message.answer(f"–ú—ñ–Ω—ñ–º—É–º {MIN_ENERGY_DONATE_MATCH} –µ–Ω–µ—Ä–≥—ñ—ó")
    
    if character.current_energy < energy:
        await state.clear()
        return await message.answer(
            text = "–£ –≤–∞—Å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –µ–Ω–µ—Ä–≥—ñ—ó, –≤–∏ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é –≤ –ö—Ä–∞–º–Ω–∏—Ü—ñ –µ–Ω–µ—Ä–≥—ñ—ó",
            reply_markup = no_energy_keyboard()
        ) 
        
    
    data = await state.get_data()
    end_time = data.get("end_time", None)
    match_data: MatchData = data.get("match_data", False)
    if not match_data or not end_time:
        await state.clear()
        return
    if int(time.time()) > end_time:
        await state.clear()
        return await message.answer(
            "–ß–∞—Å –¥–ª—è —Ü—å–æ–≥–æ –≥–æ–ª—É –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è",
        )

    old_chance_club  = match_data.get_chance_clubs()
    old_first_club_chance = old_chance_club[0]*100
    old_second_club_chance = old_chance_club[1]*100
    
    if character.id in match_data.first_club.charactets_match_ids:
        match_data.first_club.epi—ñsode_donate_energy += energy
        my_club = match_data.first_club
        
    elif character.id in match_data.second_club.charactets_match_ids:
        match_data.second_club.epi—ñsode_donate_energy += energy
        my_club = match_data.second_club
    else:
        return
        
    if my_club.epi—ñsode_donate_energy >= MIN_DONATE_ENERGY_TO_BONUS_KOEF:
        if not my_club.text_is_send_epizode_donate_energy:
            random_patch = random.choice(DONE_ENERGY_PHOTOS)
            is_save, photo = await get_photo(random_patch)
            
            text_epizode_donate = TEXT_EPIZODE_DONATE_ENERGY.format(
                name_club = my_club.club_name,
                min_donate_bonus_energy = MIN_DONATE_ENERGY_TO_BONUS_KOEF,
                koef_add_power_from_donat = KOEF_DONATE_ENERGY*100
            )
            
            message_photo = await send_message_characters_club(
                characters_club = match_data.all_characters_in_clubs,
                my_character = None,
                text = text_epizode_donate,
                photo = photo,
            )
            my_club.text_is_send_epizode_donate_energy = True
            if message_photo and not is_save:
                await save_photo_id(
                    patch_to_photo = random_patch,
                    photo_id = message_photo.photo[0].file_id,
                )

                    
    after_chance_club = match_data.get_chance_clubs()
    chance_first_club_after = after_chance_club[0]*100
    chance_second_club_after = after_chance_club[1]*100
    
    text = f"""
‚öΩÔ∏è <b>{character.character_name} –¥–æ–¥–∞–≤ {energy}üîã –¥–æ —Å–∏–ª –∫–æ–º–∞–Ω–¥—ñ {my_club.club_name}!</b> ‚öΩÔ∏è  

üî• <b>–ó–º—ñ–Ω–∏ —à–∞–Ω—Å—ñ–≤ –Ω–∞ –≥–æ–ª:</b>  
- ‚öΩÔ∏è –ö–æ–º–∞–Ω–¥–∞: {match_data.first_club.club_name} - <b>{old_first_club_chance:.2f}%</b> ‚Üí <b>{chance_first_club_after:.2f}%</b>  
- ‚öΩÔ∏è –ö–æ–º–∞–Ω–¥–∞: {match_data.second_club.club_name} - <b>{old_second_club_chance:.2f}%</b> ‚Üí <b>{chance_second_club_after:.2f}%</b>  

üí™ –ó–∞–≤–¥—è–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ –∫–æ–º–∞–Ω–¥–∞ {my_club.club_name} –æ—Ç—Ä–∏–º–∞–ª–∞ –∑–Ω–∞—á–Ω–∏–π –ø–æ—à—Ç–æ–≤—Ö! üöÄ 
    """
    await CharacterService.consume_energy(character_id=character.id, energy_consumed=energy)
    await send_message_characters_club(
        characters_club = match_data.all_characters_in_clubs,
        my_character = None,
        text = text
    )