from aiogram import Bot

from database.models.character import Character
from database.models.club import Club

from services.character_service import CharacterService
from services.club_service import ClubService
from config import PositionCharacter

from utils.club_shemas import SchemaClub

from datetime import datetime, timedelta
from loader import logger, bot


text_schemas = {
        "s—Åhema_1" : "–ü–µ—Ä—à–∞ —Å—Ö–µ–º–∞",
        "s—Åhema_2" : "–î—Ä—É–≥–∞ —Å—Ö–µ–º–∞",
        "s—Åhema_3": "–¢—Ä–µ—Ç—è —Å—Ö–µ–º–∞",
        "s—Åhema_4": "–ß–µ—Ç–≤–µ—Ä—Ç–∞ —Å—Ö–µ–º–∞",
        "s—Åhema_5": "–ü'—è—Ç–∞ —Å—Ö–µ–º–∞",
        "s—Åhema_6": "–®–æ—Å—Ç–∞ —Å—Ö–µ–º–∞"
    }

async def get_club_text(club: Club, character: Character) -> str:
    character_leader = await CharacterService.get_character(character_user_id=club.owner.user_id)
    text_leader = f"{character_leader.name} [{character_leader.owner.link_to_user}] [üí™ <b>{character_leader.full_power:.2f}</b>] [<b>{character_leader.level} —Ä—ñ–≤.</b>]"
    club = await ClubService.get_club(club_id=club.id)
    
    text = f"""
‚öΩ –ì—Ä–∞–≤–µ—Ü—å: {character.name}

üèÜ –ö–ª—É–±: {club.name_club}
üëë –õ—ñ–¥–µ—Ä: {text_leader}
üèÖ –î–∏–≤—ñ–∑—ñ–æ–Ω: {club.league}

üìä –ú–æ—î –º—ñ—Å—Ü–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–ª—É–±—É: {calculate_character_rank(
        my_character=character,
        characters_list=club.characters
    )}

üí™ –ó–∞–≥–∞–ª—å–Ω–∞ —Å–∏–ª–∞ –∫–ª—É–±—É: {club.total_power:.2f}
üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–ª–µ–Ω—ñ–≤ —É –∫–ª—É–±—ñ: {len(club.characters)}
    """
    if club.link_to_chat:
        text += f'\nüí¨ –ß–∞—Ç –∫–ª—É–±—É: <a href="{club.link_to_chat}">–ß–∞—Ç</a>'
    
    return text


async def get_club_description(club: Club) -> str:
    character_leader = await CharacterService.get_character(character_user_id=club.owner.user_id)
    text_leader = f"{character_leader.name} [{character_leader.owner.link_to_user}] [üí™ <b>{character_leader.full_power:.2f}</b>] [<b>{character_leader.level} —Ä—ñ–≤.</b>]"
    club = await ClubService.get_club(club_id=club.id)

    
    text = f"""
‚öΩ –ö–ª—É–±: {club.name_club}

üëë –õ—ñ–¥–µ—Ä: {text_leader}
üèÖ –î–∏–≤—ñ–∑—ñ–æ–Ω: {club.league}
üí™ –ó–∞–≥–∞–ª—å–Ω–∞ —Å–∏–ª–∞ –∫–ª—É–±—É: {club.total_power:.2f}
üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–ª–µ–Ω—ñ–≤ —É –∫–ª—É–±—ñ: {len(club.characters)}
    """
    return text


def calculate_character_rank(my_character: Character, characters_list: list[Character]) -> int:
    sorted_characters = sorted(characters_list, key=lambda character: character.full_power, reverse=True)
    for index, character in enumerate(sorted_characters, start=1):
        if character.id == my_character.id:
            return index
        

def get_text_education_center_reward(exp: int, coins: int, delta_time_education_reward: timedelta) -> str:
    current_time = datetime.now()
    next_reward_time = current_time + delta_time_education_reward
    next_reward_time_formatted = next_reward_time.strftime("%d-%m-%Y %H:%M:%S")
    message = f"""
üéì <b>–ü—ñ—Å–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ç—Ä–∏–º–∞–≤:</b>
‚ú® {exp} <b>–¥–æ—Å–≤—ñ–¥—É</b>  
üí∞ {coins} <b>–º–æ–Ω–µ—Ç</b>

üïí <b>–í–∏ –∑–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –Ω–∞–≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑:</b> {delta_time_education_reward} <b>–æ {next_reward_time_formatted}</b>
"""
    return message


def rating_club(club: Club, character: Character) -> str:
    def get_medal_emoji(rank: int) -> str:
        if rank == 1:
            return "ü•á"
        elif rank == 2:
            return "ü•à"
        elif rank == 3:
            return "ü•â"
        else:
            return "üèÖ"

    sorted_characters = sorted(club.characters, key=lambda c: c.full_power, reverse=True)
    rank_texts = []
    
    for idx, char in enumerate(sorted_characters, start=1):
        medal = get_medal_emoji(idx)
        if char.characters_user_id == character.characters_user_id:
            rank_texts.append(
                f"{medal} {idx} –º—ñ—Å—Ü–µ - <b><a href='tg://user?id={char.characters_user_id}'>{char.name}</a>ü©≥ </b> "
                f"[üí™ <b>{char.full_power:.2f}</b>] [<b>{char.level} —Ä—ñ–≤.</b>]"
            )
        else:
            rank_texts.append(
                f"{medal} {idx} –º—ñ—Å—Ü–µ - <a href='tg://user?id={char.characters_user_id}'>{char.name}</a> "
                f"[<b>üí™ {char.full_power:.2f}</b>] [<b>{char.level} —Ä—ñ–≤.</b>]"
            )
    
    ranking_text = "\n".join(rank_texts)
    return ranking_text

def get_text_schemas(club: Club):

    
    text = """
–ü–æ—Ç–æ—á–Ω–∞ —Å—Ö–µ–º–∞: {my_schema}
    
‚öΩ –°—Ö–µ–º–∞ –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ –º–∞—Ç—á ‚öΩ
–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –±–æ—é! –û—Å—å —è–∫ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—é—Ç—å—Å—è –≥—Ä–∞–≤—Ü—ñ –Ω–∞ –ø–æ–ª—ñ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –º–∞—Ç—á—É:

üß§ –í–æ—Ä–æ—Ç–∞—Ä [GK]: {goalkeeper} –≥—Ä–∞–≤–µ—Ü—å - –≤—ñ–Ω –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∂–æ–¥–Ω–æ–≥–æ –º'—è—á–∞! –¶–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—É–±—ñ–∂ –æ–±–æ—Ä–æ–Ω–∏, —è–∫–∏–π –æ—Ö–æ—Ä–æ–Ω—è—î –≤–æ—Ä–æ—Ç–∞.

üõ° –ó–∞—Ö–∏—Å–Ω–∏–∫–∏ [DF]: {defenders} –≥—Ä–∞–≤—Ü—è - –≤–∞—à—ñ –≥–µ—Ä–æ—ó –æ–±–æ—Ä–æ–Ω–∏! –í–æ–Ω–∏ —Å—Ç–æ—è—Ç—å —Å—Ç—ñ–Ω–æ—é –ø–µ—Ä–µ–¥ –≤–æ—Ä–æ—Ç–∞–º–∏, –∑–∞—Ö–∏—â–∞—é—á–∏ –∫–æ–º–∞–Ω–¥—É –≤—ñ–¥ –∞—Ç–∞–∫ —Å—É–ø–µ—Ä–Ω–∏–∫–∞.

‚ö° –ù–∞–ø–∞–¥–Ω–∏–∫–∏ [MF]: {attackers} –≥—Ä–∞–≤—Ü—è - —Ü–µ –≤–∞—à—ñ –Ω–∞–π–∫—Ä–∞—â—ñ –≥–æ–ª–µ–∞–¥–æ—Ä–∏! –í–æ–Ω–∏ –∑–∞–≤–∂–¥–∏ –≥–æ—Ç–æ–≤—ñ –∑–∞–≤–¥–∞—Ç–∏ –≤–∏—Ä—ñ—à–∞–ª—å–Ω–æ–≥–æ —É–¥–∞—Ä—É —ñ –∑–∞–±–∏—Ç–∏ –≥–æ–ª.

üéØ –ü—ñ–≤–∑–∞—Ö–∏—Å–Ω–∏–∫–∏ [FW]: {midfielder} –≥—Ä–∞–≤—Ü—è - –≥–æ–ª–æ–≤–Ω—ñ –º–∞–π—Å—Ç—Ä–∏ –ø–æ–ª—è! –í–æ–Ω–∏ –∫–µ—Ä—É—é—Ç—å –≥—Ä–æ—é, —Ä–æ–∑–¥–∞—é—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ —ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —è–∫ —É –∑–∞—Ö–∏—Å—Ç—ñ, —Ç–∞–∫ —ñ –≤ –∞—Ç–∞—Ü—ñ.
    """
    
    current_chema = SchemaClub.__getattribute__(SchemaClub, club.schema)
    return text.format(
        my_schema  = text_schemas[club.schema],
        defenders  = current_chema[PositionCharacter.DEFENDER],
        midfielder = current_chema[PositionCharacter.MIDFIELDER],
        attackers  = current_chema[PositionCharacter.ATTACKER],
        goalkeeper = current_chema[PositionCharacter.GOALKEEPER]
    )


async def send_message_characters_club(characters_club: list[Character],
                                       my_character: Character, text: str):
    for character in characters_club:
        if character.characters_user_id == my_character.characters_user_id:
            continue
        try:
            await bot.send_message(chat_id= character.characters_user_id, text = text)
        except Exception as E:
            logger.error(f"–ù–ï –°–ú–û–ì –û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–£ {character.name}")
            
            